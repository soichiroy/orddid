// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// dat_block_boot
arma::mat dat_block_boot(const arma::mat& dat, const arma::vec& id_cluster, const arma::vec& id_cluster_boot, const int& max_cluster_size);
RcppExport SEXP _orddid_dat_block_boot(SEXP datSEXP, SEXP id_clusterSEXP, SEXP id_cluster_bootSEXP, SEXP max_cluster_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type dat(datSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_cluster(id_clusterSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_cluster_boot(id_cluster_bootSEXP);
    Rcpp::traits::input_parameter< const int& >::type max_cluster_size(max_cluster_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(dat_block_boot(dat, id_cluster, id_cluster_boot, max_cluster_size));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_orddid_dat_block_boot", (DL_FUNC) &_orddid_dat_block_boot, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_orddid(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
